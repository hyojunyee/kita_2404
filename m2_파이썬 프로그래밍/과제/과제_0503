Task1_0503. 여러개의 음식을 동시에 주문할 수 있는 주문 시스템을 작성하세요(구조 지향)

#시나리오를 먼저 짜면서 구성을 정리하고, 안에 들어갈 함수 값을 미리 정리해보고 작성을 시작하자

[시나리오]

시작 인터페이스:
시스템 시작 시, 사용자에게 주문 시작 여부를 질문 (y 또는 n으로 응답).
y 선택 시 주문 프로세스 시작.
n 선택 시 시스템 종료 및 "감사합니다." 메시지 표시.
메뉴 표시:
주문 프로세스 시작 시, 현재 메뉴 항목과 가격 표시.
각 메뉴 옆에는 선택 번호 제공 (예: 1, 2, 3).
세트 주문 시 추가 비용 안내 (3000원 추가).
주문 입력:
메뉴 선택 입력 요청.
메뉴 번호 입력 후 세트 주문 여부 질문 (y는 세트, n은 일반).
주문 수량 질문 후, 주문 장바구니에 추가.
주문이 추가된 후 해당 내용 표시.
주문 취소:
잘못 주문했거나 주문 취소 시 0 입력.
주문 취소 시 "모든 주문이 취소되었습니다." 메시지 표시.
주문 요약 및 결제:
주문 완료하려면 5 입력.
주문 내역 및 총 금액 요약 표시.
결제 금액 안내 및 결제 진행 요청.
결제 완료 후 "총 금액은 XXX원이 결제되었습니다. 감사합니다." 메시지 표시 및 주문 초기화.
반복 주문 가능:
결제 후 추가 주문 진행 가능.
언제든지 n 입력하여 주문 프로세스 종료 및 시스템 빠져나올 수 있음.

[ 함수 구성 및 역할 ]

display_menu()
역할: 사용자에게 메뉴 선택지를 표시.
세부 기능: 메뉴 아이템과 각각의 가격, 세트 주문 시 추가 비용을 표시.
시나리오 연결: 사용자가 주문 프로세스를 시작할 때, 어떤 메뉴를 선택할 수 있는지 표시.
display_order_summary()
역할: 현재 주문 상태를 요약하여 표시.
세부 기능: 선택된 메뉴 항목, 수량, 세트 여부, 각 항목의 가격과 총 주문 금액을 계산하여 표시.
시나리오 연결: 주문을 마친 후, 사용자가 자신의 주문 내역을 확인하고 최종 결제하기 전에 전체 주문 내용 검토.
add_order(menu_id, is_set)
역할: 사용자의 메뉴 선택을 주문 목록에 추가.
세부 기능: 메뉴 ID와 세트 여부에 따라 주문을 추가하고, 추가된 주문 정보를 사용자에게 전달.
시나리오 연결: 사용자가 메뉴를 선택하고 주문 수량을 입력할 때, 해당 주문을 시스템에 추가 및 확인.
process_order()
역할: 주문 프로세스의 메인 컨트롤러.
세부 기능: 사용자의 입력을 받아 메뉴 선택, 주문, 주문 취소, 결제를 처리하고, 프로세스의 시작과 종료를 관리.
시나리오 연결: 전체 주문 프로세스를 실행하고, 사용자의 각 선택에 따라 적절한 행동을 지시하며, 필요에 따라 다른 함수들을 호출.
[ 시나리오의 흐름과 함수 연결 ]

시작: 사용자가 주문을 시작하겠다고 응답하면 (y 입력), display_menu() 함수가 호출되어 사용 가능한 메뉴를 표시.
메뉴 선택: 사용자가 메뉴 번호를 입력하고, 세트 여부를 선택하면 add_order() 함수가 호출되어 주문을 추가.
주문 확인: 주문을 추가할 때마다 display_order_summary() 함수가 호출되어 현재까지의 주문 상태를 확인.
주문 수정 또는 결제: 사용자가 주문을 취소하거나 변경할 수 있고, 최종적으로 결제를 원할 때 process_order() 함수 내에서 결제를 진행.
종료: 주문 결제가 완료되면, 사용자가 추가 주문을 원하지 않을 경우 (n 입력), 시스템이 종료.
이러한 구조화된 접근 방식은 코드의 각 부분이 시나리오의 어떤 단계와 연결되는지 명확하게 정의하며, 시스템의 유지 관리와 확장성을 개선.

# 메뉴 아이템과 가격 설정
menu_items = {
    '1': ("불고기 비빔밥", 12000),
    '2': ("야채 비빔밥", 8000),
    '3': ("전주 비빔밥", 10000)
}
set_price = 3000
orders = {}
price_total = 0

def display_menu():
    print("\n♣♣♣ KITA 식당에 오신 것을 환영합니다 ♣♣♣")
    print("========================================")
    print("           - 메뉴 -")
    for key, (name, price) in menu_items.items():
        print(f"  {key}. {name} : {price}원")
    print("\n  세트 주문시 : 3000원 추가 (세트는 밥과 반찬이 추가됩니다.)")
    print("========================================")

def display_order_summary():
    global price_total  # 전역 변수 price_total 사용 선언
    print("\n■장바구니")
    price_total = 0
    for key, (name, price) in menu_items.items():
        count = orders.get((key, False), 0)
        count_set = orders.get((key, True), 0)
        print(f" {name} {count}개: {count * price}원")
        print(f" {name} 세트 {count_set}개: {count_set * (price + set_price)}원")
        price_total += (count * price) + (count_set * (price + set_price))
    print(f" 총 금액 {price_total}원\n")

def add_order(menu_id, is_set):
    item_name, item_price = menu_items[menu_id]
    if is_set:
        item_price += set_price
    num = input(f"\n● {item_name}{' 세트' if is_set else ''} 몇 개 주문 하시겠습니까?\n")
    if num.isdigit() and int(num) > 0:
        orders[(menu_id, is_set)] = orders.get((menu_id, is_set), 0) + int(num) # orders는 {(menu_id, is_set):개수}
        print(f"\n{item_name}{' 세트' if is_set else ''} {num}개가 장바구니에 담겼습니다.\n")
    else:
        print('★양수만 입력하세요.★')

def process_order():
    while True:
        msg = input("● 주문을 하시겠습니까? (y 또는 n) >> ").strip().lower()
        if msg == 'y':
          while True:
            display_menu()
            display_order_summary()
            choice = input("● 주문할 메뉴를 골라주세요. (불고기 비빔밥:1, 야채 비빔밥:2, 전주 비빔밥:3, \
            전체 취소:0, 결재:5) >> ").strip().lower()
            if choice in menu_items:
                set_choice = input("\n●3000원을 추가해 세트로 주문하시겠습니까? \
                (일반주문시:n, 세트주문시:y)\n").strip().lower()
                if set_choice in ['y', 'n']:
                    add_order(choice, set_choice == 'y')
                else:
                    print('★올바른 선택을 입력하세요 (y 또는 n).★')
            elif choice == '0':
                orders.clear()
                print('\n모든 주문이 취소되었습니다.')
            elif choice == '5':
                if price_total > 0:
                    print(f'\n●주문하려면 결제해주세요. 결제금액은 {price_total}원 입니다.\n')
                    input("결제를 완료하려면 아무 키나 누르세요...")  # 사용자가 결제를 확인할 수 있도록 입력 대기
                    print(f"\n총 금액 {price_total}원이 결제 되었습니다. 감사합니다.")
                    orders.clear()
                    break
                else:
                    print('★메뉴를 고르고 주문해주세요!★')
            else:
                print('★메뉴의 지정된 숫자로 입력하세요★')
        else:
          print('감사합니다.')
          break
if __name__ == "__main__":
    process_order()


Task2_0503. 내장함수 5개를 활용해서 사용자 함수로 간단한 프로그램을 만드세요.

[예시] 문서관리 프로그램

len() - 문자열의 길이를 계산합니다.
input() - 사용자로부터 입력을 받습니다.
print() - 결과를 출력합니다.
sum() - 주어진 조건에 따라 특정 개수를 계산합니다.
Counter (from collections) - 문자의 빈도수를 계산합니다.




Task3_0503. 외장함수 3개이상을 활용해서 간단한 프로그램을 만드세요.

import os         #
import datetime   # 날짜
import shutil     # 복사

def daily_scheduler():
    # 현재 날짜와 시간을 가져옵니다.
    today = datetime.datetime.now()
    date_string = today.strftime("%Y-%m-%d %H:%M:%S")
    print(f"오늘의 날짜와 시간 : {date_string}")
    # 작업 파일의 이름을 정합니다.
    filename = f"task_{today.strftime('%Y%m%d')}.txt"
    # 파일이 이미 존재하는지 확인합니다.
    if os.path.exists(filename):
        print(f"'{filename}' 파일이 이미 존재합니다. 백업을 생성합니다.")
        # 백업 파일 생성
        shutil.copy(filename, filename + ".bak")
    else:
        print(f"'{filename}' 파일이 존재하지 않습니다. 새로운 파일을 생성합니다.")
    # 사용자로부터 오늘의 주요 작업을 입력받습니다.
    task = input("오늘의 주요 작업을 입력하세요 : ")
    # 작업 내용을 파일에 저장합니다.
    with open(filename, 'a') as file:
        file.write(f"{date_string}: {task}\n")
    print(f"'{filename}' 파일에 작업이 저장되었습니다.")
if __name__ == "__main__":
    daily_scheduler()



Task4_0503. 리스트를 작성하고 람다 함수를 이용해서 한번에 함수를 적용하여 결과값을 출력하세요.

# 예시
# numbers = [1, 2, 3, 4, 5]
# squared_numbers = map(lambda x: x*x, numbers)
# print(list(squared_numbers))

# 짝수
numbers = [1, 2, 3, 4, 5]
filtered_number = filter(lambda x: x % 2 == 0, numbers)
print(list(filtered_number))



Task5_0503. 외부 라이브러리를 임포트해서 간단한 프로그램을 만드세요.

import requests
from bs4 import BeautifulSoup

def fetch_website_content(url):
    # URL에서 데이터를 가져옵니다.
    response = requests.get(url)
    if response.status_code == 200:
      # HTML 내용을 BeautifulSoup 객체로 파싱합니다.
      soup = BeautifulSoup(response.text, 'html.parser')

      # 예제: 페이지 타이틀을 출력합니다.
      print("Page Title:", soup.title.string if soup. title else "No title found")
    else:
      print("Failed to retrieve th webpage")
      print("Status code:", response.statuse_code)

url = input("주소를 입력해주세요:")
if __name__ == "__main__":
    fetch_website_content(url)
