--Task1_0520. 10개의 속성으로 구성되는 테이블 2개를 작성하세요. 단 FOREIGN KEY를 적용하여 한쪽 테이블의 데이터를 삭제 시 다른 테이블의
--관련되는 데이터도 모두 삭제되도록 하세요. (모든 제약조건을 사용)
--단, 각 테이블에 5개의 데이터를 입력하고 두번째 테이블에 첫번째 데이터를 참조하고 있는 속성을 선택하여 데이터 삭제
DROP TABLE make_char;
DROP TABLE user_info;
CREATE TABLE user_info (
    userid VARCHAR2(30) PRIMARY KEY,
    username VARCHAR2(40),
    nickname VARCHAR2(50),
    age NUMBER,
    gender VARCHAR2(40),
    phone VARCHAR2(20),
    address VARCHAR2(200),
    email VARCHAR2(50),
    reg_date DATE,
    last_login DATE
);
CREATE TABLE make_char (
    charid NUMBER PRIMARY KEY,
    charname VARCHAR2(40),
    uslevel NUMBER,
    charjob VARCHAR2(30),
    chargender VARCHAR2(20),
    hp NUMBER,
    mp NUMBER,
    atk NUMBER,
    mgatk NUMBER,
    defence NUMBER,
    userid VARCHAR2(30),
    FOREIGN KEY (userid) REFERENCES user_info(userid) ON DELETE CASCADE
);

INSERT INTO user_info
VALUES ('user123', '민식', '민시그', 25, 'male', '010-1234-5678', '강남구 역삼동', 'minsick@naver.com', TO_DATE('2024-04-24', 'YYYY-MM-DD'), TO_DATE('2024-05-20', 'YYYY-MM-DD'));
INSERT INTO make_char
VALUES (1, 'minsig', 10, 'Warrior', 'male', 100, 50, 25, 10, 25, 'user123');

SELECT * FROM user_info;
SELECT * FROM make_char;

DELETE FROM user_info WHERE userid = 'user123';

SELECT * FROM user_info;
SELECT * FROM make_char;


--Task2_0520. Customer 테이블에서 박세리 고객의 주소를 김연아 고객의 주소로 변경하시오.
UPDATE customer
SET address = (SELECT address FROM customer WHERE name = '김연아')
WHERE name = '박세리';
--customer에 address를 업데이트해라 조건에 따라

--Task2_0520_1. 주소를 원래대로 돌려보세요
UPDATE customer
SET address = '대한민국 대전'
WHERE name = '박세리';

SELECT * FROM customer;

--Task3_0520.도서 제목에 ‘야구’가 포함된 도서를 ‘농구’로 변경한 후 도서 목록, 가격을 보이시오.

--강사님 풀이
SELECT REPLACE(bookname, '야구', '농구') 도서목록, price 가격
FROM Book;

--똑같은대 나는 농구 목록만 보여줘야 되는줄 앎. WHERE REPLACE를 밑에서 한번 더 쓴 이유는 REPLACE는 조회할때만 바뀌고 원래 데이터를 바꾸지 않음.
--바꾸려면 UPDATE 해주고 반영 완료에는 COMMIT까지 완료해줘야됨
SELECT REPLACE(bookname, '야구', '농구') 도서목록, price 가격
FROM Book
WHERE REPLACE(bookname, '야구', '농구') LIKE '%농구%';

SELECT * FROM book;
ROLLBACK;

--Task4_0520. 마당서점의 고객 중에서 같은 성(姓)을 가진 사람이 몇 명이나 되는지 성별 인원수를 구하시오.
--SUBSTR(name, 1, 1) 함수는 문자열 name의 첫 번째 글자뿌터 시작하여 한 글자를 반환
--GROUP BY 절에서는 별칭이 아닌 SUBSTR(name, 1, 1)처럼 표현식을 사용해야 한다.
SELECT SUBSTR(name, 1, 1) 성, COUNT(*) 인원수
FROM customer
GROUP BY SUBSTR(name, 1, 1);

--Task5_0520. 마당서점은 주문일로부터 10일 후 매출을 확정한다. 각 주문의 확정일자를 구하시오.
SELECT * FROM orders;
SELECT orderid 주문ID, orderdate 주문일, orderdate + 10 확정일자
FROM orders;

--Task5_0520_1. 2개월후의 확정일자를 구하시오.
SELECT orderid 주문ID, orderdate 주문일, orderdate + 62 확정일자
FROM orders;

SELECT orderdate "주문 일자", ADD_MONTHS(orderdate, 2) "확정 일자"
FROM orders;

--Task6_0520.마당서점이 2020년 7월 7일에 주문받은 도서의 주문번호, 주문일, 고객번호, 도서번호를 모두 보이시오. 
--단 주문일은 ‘yyyy-mm-dd 요일’ 형태로 표시한다.
SELECT orderid 주문번호, orderdate, TO_CHAR(orderdate, 'yyyy-mm-dd Day') 주문일, custid 고객번호, bookid 도서번호
FROM orders WHERE orderdate = '2020-07-07';

--'NLS_DATE_LANGUAGE = ''japanese'''등으로 다른 나라의 요일 표시형식을 사용가능.
SELECT orderid 주문번호, TO_CHAR(orderdate, 'yyyy-mm-dd Day', 'NLS_DATE_LANGUAGE = ''english''') 주문일, custid 고객번호, bookid 도서번호
--날짜 표시 바꾸는 참고용
FROM orders WHERE orderdate = TO_DATE('20/07/07', 'yy/mm/dd');
--FROM orders WHERE orderdate = TO_DATE('2020-07-07', 'yyyy-mm-dd');

--Task7_0520. 평균 주문금액 이하의 주문에 대해서 주문번호와 금액을 보이시오.
SELECT orderid, saleprice
FROM orders
WHERE saleprice <= (SELECT AVG(saleprice)
FROM orders);

--별칭으로 메인쿼리와 서브커리를 나눠서 가독성을 좋게함.
SELECT O1.orderid, O1.saleprice 
FROM orders O1
WHERE O1.saleprice <= (SELECT AVG(O2.saleprice)
FROM orders O2);

--JOIN을 사용하여 avg_saleprice를 만들고 그것을 O2로(밖으로 빼야됨)지정해주고 비교 할 수 있다.
SELECT O1.orderid, O1.saleprice 
FROM orders O1
JOIN (SELECT AVG(saleprice) AS avg_saleprice FROM orders) O2
on O1.saleprice <= o2.avg_saleprice;

WITH avgprice AS (SELECT AVG(saleprice) AVG_price FROM orders)
SELECT orderid, saleprice FROM orders
WHERE saleprice <= (SELECT AVG_price FROM avgprice);

--Task8_0520. 대한민국’에 거주하는 고객에게 판매한 도서의 총 판매액을 구하시오.
SELECT SUM(O.saleprice) 총판매액
FROM orders O
JOIN customer C ON O.custid = C.custid
WHERE C.address LIKE '%대한민국%';

--강사님 풀이
SELECT SUM(saleprice) 총판매액
FROM orders
WHERE custid IN (SELECT custid FROM customer WHERE address LIKE '%대한민국%');
