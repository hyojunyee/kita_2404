Select * From employees;

--Q. 사번이 120번인 사람의 사번, 이름 업무(job_id), 업무명(job_title)을 출력.
Select E.employee_id 사번, E.first_name 이름, E.last_name 성, E.job_id 업무, J.job_title 업무명
From employees E
Inner Join jobs J On E.job_id = J.job_id
Where E.employee_id = 120;

--FIRST_NAME ||''|| LAST_NAME AS 이름 : FIRST_NAME과 LAST_NAME을 공백으로 연결하여
--하나의 문자열로 합치고, 이 결과의 별칭을 '이름'으로 지정
--||' '||로 두개를 이어준다. 괄호는 상황에 따라.
Select
    E.employee_id 사번,
    E.first_name ||' '|| E.last_name 이름,
    E.job_id 업무,
    J.job_title 업무명
From employees E
Inner Join jobs J On E.job_id = J.job_id
Where E.employee_id = 120;

Select
    E.employee_id 사번,
    E.first_name ||' '|| E.last_name 이름,
    E.job_id 업무,
    J.job_title 업무명
From employees E, jobs J
Where E.employee_id = 120
And E.job_id = J.job_id;

--Q. 2005년 상반기에 입사한 사람들의 이름(Full name)만 출력
Select
    first_name ||' '|| last_name 이름,
    hire_date 입사일
From employees
Where To_Char(hire_date, 'YY/MM') Between '05/01' And '05/06';

--Q. 하반기 입사
Select
    first_name ||' '|| last_name 이름,
    hire_date 입사일
From employees
Where To_char(hire_date, 'YY/MM') Between '05/07' And '05/12';

--_을 와일드카드가 아닌 문자로 취급하고 싶을 때 escape 옵션을 사용
Select * From employees Where job_id like '%\_A%';              --escape 표시가 없어서 출력이 안됨.
Select * From employees Where job_id like '%\_A%' escape '\';   --\를 escape로 쓰겠다.
Select * From employees Where job_id like '%#_A%' escape '#';   --#을 escape로 쓰겠다.

--IN : OR 대신 사용
Select * From employees Where manager_id = 101 Or manager_id = 102 Or manager_id = 103;
Select * From employees Where manager_id In (101, 102, 103);

--Q. 업무 SA_MAN, IT_FROG, ST_MAN 인 사람만 출력
Select * from employees Where job_id In ('SA_MAN', 'IT_FROG', 'ST_MAN');
--Select * from employees Where job_id = 'SA_MAN' OR job_id = 'IT_FROG' Or job_id = 'ST_MAN';   --in이 더 간단하게 작성 가능

--IS NULL / IS NOT NULL
--null 값인지를 확인할 경우 = 비교 연산자를 사용하지 않고 is null을 사용한다.
Select * From employees Where commission_pct Is Null;
Select * From employees Where commission_pct Is Not Null;

--ORDER BY
--ORDER BY 컬럼명 [ASC | DESC] 오름차순이 DEFAULT 값
Select * From employees Order By salary Asc;
Select * From employees Order By salary Desc;
Select * From employees Order By salary Asc, last_name Desc;

--DUAL 테이블
--MOD 나머지 구하기
Select * From employees Where Mod(employee_id, 2) = 1;      --employee_id가 홀수인것만 보인다.
Select Mod(10, 3) From Dual;

--ROUND() 반올림
Select Round(355.9555) From Dual;
Select Round(355.9555, 2) From Dual;
Select Round(355.9555, -2) From Dual;

--TRUNC() 버림 함수. 지정한 자리수 이하를 버린 결과를 제공
Select Trunc(45.5555) From Dual;
Select Trunc(45.5555, 2) From Dual;
Select Trunc(45.5555, -1) From Dual;

--CEIL() 올림 함수
Select Trunc(45.1111) From Dual;
Select Trunc(45.1111, 2) From Dual;         --두자리까지만 표현됨(올림은 안됨)
Select Trunc(445.1111, -1) From Dual;       --440표현됨(버림이나 마찬가지)

--Q. HR EMPLOYEES 테이블에서 이름, 급여, 10% 인상된 급여를 출력하세요.
Select
    first_name ||' '|| last_name 이름,
    salary 급여,
    salary*1.1 "인상된 급여"
From employees;

--Q. EMPLOYEE_ID가 홀수인 직원의 EMPLOYEE_ID와 LAST_NAME을 출력하세요
Select
    employee_id,
    last_name
From employees
Where Mod(employee_id, 2) = 1;

Select
    employee_id,
    last_name
From employees
Where employee_id In (Select employee_id From employees Where Mod(employee_id, 2) = 1);

--E1, E2로 자체조인을 해서 푸는 과정.(레이어 두개를 만들었다고 생각하면 편하다.)
--근데 궂이 이렇게 할 필요없음.
SELECT
    E1.employee_id,
    E1.last_name
FROM
    employees E1
    JOIN employees E2 ON E1.employee_id = E2.employee_id
WHERE
    Mod(E1.employee_id, 2) = 1;

--이렇게 만들어도 되는 모습... ㅋㅋ
SELECT
    E1.employee_id,
    E1.last_name
FROM
    employees E1
WHERE
    Mod(E.employee_id, 2) = 1;
-- 위에서 만든 E1을 활용하는 모습.
SELECT
    E1.last_name
FROM
    employees E1
WHERE
    e1.job_id = 'AD_VP';


--Q. EMPLOYEES 테이블에서 COMMISSION_PCT 의 NULL 값 갯수를 출력하세요.
Select Count(*) From employees Where commission_pct Is Null;

--Q. EMPLOYEES 테이블에서 DEPARTMENT_ID가 없는 직원을 추출하여 POSITION을 '신입'으로 출력하세요.(POSITION 열을 추가)
Select
    employee_id,
    first_name ||' '|| last_name 이름,
    '신입' Position
From employees
Where department_id Is Null;

--Q. HR EMPLOYEES 테이블에서 SALARY, LAST_NAME 순으로 올림차순 정렬하여 출력하세요.
Select *
From employees
Order By salary, last_name;

--날짜관련
Select Sysdate From Dual;
Select Sysdate + 1 From Dual;
Select Sysdate -1 From Dual;

Select * From employees;
--근무 날짜 계산
Select
    last_name,
    Sysdate,
    hire_date,
    Trunc(Sysdate - hire_date) 근무기간
From employees
Order By 근무기간;

--Add_months()          특정 개월 수를 더한 날짜를 구한다.
Select
    last_name,
    hire_date,
    Add_months(hire_date, 6) revised_date
From employees;    

--Last_day()            해당 월의 마지막 날짜를 반환하는 함수
Select
    last_name,
    hire_date,
    Last_day(hire_date)
From employees;

Select
    last_name,
    hire_date,
    Last_day(Add_moths(hire_date, 1))
From employees;

--Next_day()            해당 날짜를 기준으로 다음에 오는 요일에 해당하는 날짜를 반환
--일 ~ 토, 1 ~ 7 로 표현가능
Select
    hire_date,
    Next_day(hire_date, '월')
From employees;

Select
    hire_date,
    Next_day(hire_date, 2)
From employees;

--Months_between()           날짜와 날짜 사이의 개월 수를 구한다.(개월 수를 소수점 첫째 자리까지 반올림)
Select
    hire_date,
    Round(months_between(Sysdate, hire_date), 1) "재직기간(월)"
From employees;

--형 변환 함수 : To_date()             문자열을 날짜로 변환
--'2023-01-01'이라는 문자열을 날짜 타입으로 변환
--문자열을 날짜로 바꿀때는 데이터에 있는 것들을 지정해줘야됨. 여기선 YYYY-MM-DD가 그 예
Select To_date('2023-01-01', 'yyyy-mm-dd') From Dual;

--To_char(날짜)           날짜를 문자열로 변환
Select To_char(Sysdate, 'yy/mm/dd') From Dual;
Select To_char(Sysdate, 'yy/mm/dd day hh12:mi:ss') From Dual;

--형식(외에도 더 있음)
--YYYY       네 자리 연도
--YY      두 자리 연도
--YEAR      연도 영문 표기
--MM      월을 숫자로
--MON      월을 알파벳으로
--DD      일을 숫자로
--DAY      요일 표현
--DY      요일 약어 표현
--D      요일 숫자 표현
--AM 또는 PM   오전 오후
--HH 또는 HH12   12시간
--HH24      24시간
--MI      분
--SS      초

--Q. 현재 날짜(SYSDATE)를 'YYYY/MM/DD' 형식의 문자열로 변환하세요.
Select To_char(Sysdate, 'yyyy/mm/dd') "현재 날짜" From Dual;

--Q. '01-01-2023'이라는 문자열을 날짜 타입으로 변환하세요.
Select To_date('01-01-2023', 'mm-dd-yyyy') From Dual;

--Q. 현재 날짜와 시간(SYSDATE)을 'YYYY-MM-DD HH24:MI:SS' 형식의 문자열로 변환하세요.
Select To_char(Sysdate, 'yyyy/mm/dd hh24:mi:ss') "현재 날짜" From Dual;

--Q. '2023-01-01 15:30:00'이라는 문자열을 날짜 및 시간타입으로 변환하세요.
Select To_date('2023-01-01 15:30:00', 'yyyy-mm-dd hh24:mi:ss') From Dual;
--Q. SQL에서 To_date 형식은 정해져 있다.

--to_char( 숫자 )   숫자를 문자로 변환
--9         한 자리의 숫자 표현        ( 1111, ‘99999’ )      1111   
--0         앞 부분을 0으로 표현       ( 1111, ‘099999’ )     001111
--$         달러 기호를 앞에 표현      ( 1111, ‘$99999’ )     $1111
--.         소수점을 표시             ( 1111, ‘99999.99’ )   1111.00
--,         특정 위치에 , 표시        ( 1111, ‘99,999’ )      1,111
--MI        오른쪽에 - 기호 표시      ( 1111, ‘99999MI’ )     1111-
--PR        음수값을 <>로 표현        ( -1111, ‘99999PR’ )    <1111>
--EEEE      과학적 표현              ( 1111, ‘99.99EEEE’ )   1.11E+03
--V         10을 n승 곱한값으로 표현  ( 1111, ‘999V99’ )      111100
--B         공백을 0으로 표현         ( 1111, ‘B9999.99’ )   1111.00
--L         지역통화                 ( 1111, ‘L9999’ )

Select salary, To_char(salary, '0999999') From employees;
Select salary, To_char(-salary, '0999999pr') From employees;
Select To_char(11111, '9.9999eeee') From Dual;
Select To_char(-1111111, '9999999mi') From Dual;

--Width_bucket(expr, min_value, max_value, num_buckets)
--특정 기준에 의해 데이터들을 분할하는 분석 함수
--expr : 데이터, min_value : 분할할 구간의 최소값, max_value : 분할할 구간의 최대값, num_buckets : 분할할 개수

Select Width_bucket(82, 0, 100, 10) From Dual;
Select Width_bucket(100, 0, 100, 10) From Dual;

Select salary From employees;
--Q. employees 테이블의 salary를 5개 등급으로 표시하세요
--제일 높은 값은 포함이 되지 않는다. 조심!
Select Max(salary) max, Min(salary) min From employees;
Select
    salary,
    Width_bucket(salary, 2100, 24001, 5) grade
From employees;

--문자함수 Character Function
--Upper()           대문자로변경
Select upper('Hello World') From Dual;
--Lower()           소문자로 변경
Select Lower('Hello World') From Dual;

--Q. Last_name이 Seo인 직원의 Last_name과 salary를 구하세요.(Seo, SEO, seo 모두 검출)
Select
    last_name,
    salary
from employees
Where Lower(last_name) = 'seo';

--Initcap()         첫글자만 대문자로
Select job_id, Initcap(job_id) From employees;

--Length()          문자열의 길이
Select job_id, Length(job_id) From employees;

--instr()           문자열, 찾을 문자, 찾기 시작할 위치, 찾은 문자 중 몇번째 // Oracle SQL에서는 시작 인덱스가 1이다
Select instr('Hello World', 'o', 3, 2) From Dual;

--substr()          문자열, 시작위치, 개수
Select substr('Hello World', 3, 3) From Dual;
Select substr('Hello World', 1, 5) From Dual;
Select substr('Hello World', -5, 5) From Dual;

--Lpad()            오른쪽 정렬 후 왼쪽에 문자를 채운다.
Select Lpad('Hello World', 20, '#') From Dual;

--Rpad()            왼쪽 정렬 후 오른쪽에 문자를 채운다.
Select Rpad('Hello World', 20, '$') From Dual;

--Ltrim()           아무것도 없으면 공백제거, 특정 문자를 주면 왼쪽 부터 특정 문자를 제거
Select Ltrim('aaaHello Worldaaa', 'a') From Dual;
Select Ltrim('   Hello World   ') From Dual;

--Rtrim()           아무것도 없으면 공백제거, 특정 문자를 주면 오른쪽 부터 특정 문자를 제거
Select Rtrim('aaaHello Worldaaa', 'a') From Dual;
Select Rtrim('   Hello World   ') From Dual;

Select last_name From employees;
Select last_name 이름, Ltrim(last_name, 'A') 변환
From employees;

--trim
Select Trim('   Hello World   ') From Dual;
--앞, 뒤의 특정 문자 제거
Select last_name, Trim('A' From last_name) From employees;

--nvl()         null을 0 또는 다른 값으로 변환하는 함수
Select
    last_name,
    manager_id,
    nvl(To_char(manager_id),'CEO')
From employees;
