--nvl()         null을 0 또는 다른 값으로 변환하는 함수
Select
    last_name,
    manager_id,
    nvl(To_char(manager_id),'CEO')
From employees;

--decode()    if문이나 case문과 같이 여러 경우를 선택할 수 있도록 하는 함수
--DECODE 함수는 단순한 조건에 기반하여 값을 반환합니다. 구문은 DECODE(expression, search1, result1, ..., searchN, resultN, default) 
--여기서 expression은 검사할 값을 나타내고, search와 result는 각각 조건과 해당 조건이 참일 때 반환할 값
--default는 모든 search 조건이 거짓일 때 반환할 기본 값 출력
Select
    last_name,
    department_id,
    decode(department_id,
        60, '프로그래머',
        90, '경영지원실',
        100, '인사부',
        '기타') 부서
From employees;

Select
    commission_pct as commission,
    decode(commission_pct, null, 'N', 'A') As 변환
From employees
order by 변환 desc;

--case()
--decode() 함수와 유사하나 decode() 함수는 단순한 조건 비교에 사용되는 반면
--case() 함수는 다양한 비교연산자로 조건을 제시할 수 있다.
--CASE 문은 조건에 따라 다른 값을 반환하는 데 사용되며, DECODE보다 복잡한 조건을 표현할 수 있다. 
--구문은 CASE WHEN condition THEN result ... ELSE default END이다. 
Select
    last_name,
    department_id,
    Case 
        When department_id = 60 Then '프로그래머'
        When department_id = 90 Then '경영지원실'
        When department_id = 100 Then '인사부'
        Else '기타'
    End As 소속
From employees;

--Q. employees 테이블에서 sallary가 20000이상이면 'a', 10000과 20000 사이면 'b', 그 이하면 'c'로 표시하는 쿼리를 작성하시오(case)
Select
    last_name,
    salary,
    Case
        When salary >= 20000 Then 'a'
        When salary > 10000 and salary < 20000 Then 'a'
--        When salary Between 10000 and 19999 Then 'b'
        Else 'c'
    End As 등급
From employees;

--INSERT
--테이블에 데이터를 입력하는 방법은 두 가지 유형이 있으며 한 번에 한 건만 입력된다.
--a. INSERT INTO 테이블명 (COLUMN_LIST) VALUES (COLUMN_LIST에 넣을 VALUE_LIST);
--b. INSERT INTO 테이블명 VALUES (전체 COLUMN에 넣을 VALUE_LIST);

--Concatenation : 콤마대신에 사용하면 문자열이 연결 되어 출력 된다.
Select last_name, 'is a', job_id From employees;
Select last_name || ' is a ' || job_id From employees;

--Union
--Union(합집합) Intersect(교집합) Minus(차집합) Union All(겹치는것까지 포함)
--두개의 쿼리문을 사용해야 한다. 데이터 타입을 일치 시켜야 한다.
--두 결과를 합해준다.
Select first_name 이름, salary 급여, hire_date
From employees
Where salary < 5000
union
Select first_name 이름, salary 급여, hire_date
From employees
Where hire_date < '05/01/01';
--두 결과를 빼준다
Select first_name 이름, salary 급여, hire_date
From employees
Where salary < 5000
minus
Select first_name 이름, salary 급여, hire_date
From employees
Where hire_date < '05/01/01';
--공통 되는 것 만 나온다.
Select first_name 이름, salary 급여, hire_date
From employees
Where salary < 5000
Intersect
Select first_name 이름, salary 급여, hire_date
From employees
Where hire_date < '05/01/01';
--조건을 만족하면 중복되서 나온다. Union과 차이
Select first_name 이름, salary 급여, hire_date
From employees
Where salary < 5000
Union All
Select first_name 이름, salary 급여, hire_date
From employees
Where hire_date < '05/01/01';

--CREATE VIEW 명령어는 오라클 SQL에서 테이블의 특정 부분이나 조인된 결과를 논리적인 뷰(view)로 만들 때 사용
--뷰는 데이터를 요약하거나 복잡한 조인을 단순화하며, 사용자에게 필요한 데이터만을 보여주는 데 유용
--뷰는 실제 테이블 데이터를 복사하지 않고, 대신 쿼리 결과를 저장
--뷰의 주요 특징
--쿼리 단순화: 복잡한 쿼리를 뷰로 저장함으로써 사용자는 복잡한 쿼리문을 반복해서 작성할 필요 없이 간단하게 뷰를 참조할 수 있다.
--데이터 추상화: 뷰는 기본 테이블의 구조를 숨기고 사용자에게 필요한 데이터만을 보여줄 수 있어, 데이터 추상화를 제공.
--보안 강화: 뷰를 사용하면 특정 데이터에 대한 접근을 제한할 수 있으며, 사용자가 볼 수 있는 데이터의 범위를 제어할 수 있다.
--데이터 무결성 유지: 뷰를 사용하여 데이터를 수정하더라도, 이 변경사항이 기본 테이블의 데이터 무결성 규칙을 위반하지 않도록 관리할 수 있다.

Create View employee_details As
Select employee_id, last_name, department_id
From employees;
Select * From employee_details;

--Q. employees 테이블에서 sallary가 10000원 이상인 직원만을 포함하는 뷰 special_employee를 생성하는 SQL 명령문을 작성하시오
Create View special_employee As
Select
    employee_id,
    first_name ||' '|| last_name 이름,
    salary
From employees
Where salary >= 10000;
Select * From special_employee;

Create Or Replace View special_employee As
Select *
From employees
Where salary >= 10000;

--Q. employees 테이블에서 각 부서별 직원 수를 포함하는 뷰를 생성하세요.(직원수 기준으로 정렬)
Create View department_employee_count As
Select department_id, Count(*) As "부서별 직원수"
From employees
Group By department_id
Order By "부서별 직원수";
Select * From department_employee_count;

Create Or Replace View department_employee_count As
Select D.department_name, Count(*) As 부서별_직원수
From employees E
Join Department D ON E.department_id = D.department_id
GROUP BY D.department_id
Order By 부서별_직원수;
Select * From department_employee_count;
--부서 이름으로 만들기.
CREATE OR REPLACE VIEW department_employee_count AS
SELECT 
    D.department_name, 
    COUNT(*) AS 부서별_직원수
FROM employees E
JOIN departments D ON E.department_id = D.department_id
GROUP BY D.department_name
Order By 부서별_직원수;

--Q. employees 테이블에서 근속기간이 10년 이상인 직원을 포함하는 뷰를 생성하세요.
Create View goinmul As
Select first_name ||' '|| last_name 이름, Round(Sysdate-hire_date) As 근속일수
From employees
Where Trunc(Sysdate-Hire_date) > 365 * 10;
Select * From goinmul;
Drop View goinmul;

--TCL (Transaction Control Language)
--COMMIT: 현재 트랜잭션 내에서 수행된 모든 변경(INSERT, UPDATE, DELETE 등)을 데이터베이스에 영구적으로 저장.
--COMMIT 명령을 실행하면, 트랜잭션은 완료되며, 그 이후에는 변경 사항을 되돌릴 수 없다.
--ROLLBACK: 현재 트랜잭션 내에서 수행된 변경들을 취소하고, 데이터베이스를 트랜잭션이 시작하기 전의 상태로 되돌린다. 
--오류가 발생했거나 다른 이유로 트랜잭션을 취소해야 할 경우에 사용된다.
--SAVEPOINT: 트랜잭션 내에서 중간 체크포인트를 생성합니다. 오류가 발생할 경우, ROLLBACK을 사용하여 최근의 SAVEPOINT까지 되돌릴 수 있다.
--트랜잭션을 콘트롤하는 TCL(TRANSACTION CONTROL LANGUAGE)

--members 테이블 생성
Drop Table members;
Create Table members (
    member_id Number Primary Key,
    name Varchar2(100),
    email Varchar2(100),
    join_date Date,
    Status Varchar2(20)
);

INSERT INTO members (member_id, name, email, join_date, status) VALUES (1, 'John Doe', 'john@example.com', SYSDATE, 'Active');
INSERT INTO members (member_id, name, email, join_date, status) VALUES (2, 'Jane Doe', 'jane@example.com', SYSDATE, 'Active');
INSERT INTO members (member_id, name, email, join_date, status) VALUES (3, 'Mike Smith', 'mike@example.com', SYSDATE, 'Inactive');
INSERT INTO members (member_id, name, email, join_date, status) VALUES (4, 'Alice Johnson', 'alice@example.com', SYSDATE, 'Active');
INSERT INTO members (member_id, name, email, join_date, status) VALUES (5, 'Bob Brown', 'bob@example.com', SYSDATE, 'Inactive');
INSERT INTO members (member_id, name, email, join_date, status) VALUES (6, 'Bob Brown', 'bob@example.com', SYSDATE, 'Inactive');
Select * From members;

--sp1은 savepoint1
Savepoint sp1;
INSERT INTO members (member_id, name, email, join_date, status) VALUES (7, 'Van Dike', 'van@example.com', SYSDATE, 'Inactive');

Rollback to sp1;
commit;


--------------------------------------------------------------------------------Insight 예제
--부서별 급여 현황
--테이블생성, 부서별 급여와 총 급여를 확인 할 수 있음.
--(급여의 합 평균 최솟값 최댓값, 총 직원수, 급여전체총합, 직원평균급여, 부서평균급여)
--table 만들기 부서별 급여를 대략적으로 보기
--사용할 테이블 확인
select * from jobs;
select * from departments;
select * from employees;
select * from job_history;

--부서 목록 확인
SELECT department_id
from employees
group by department_id
order by department_id DESC;
-- 부서 목록 department_id : 10,20,30,40,50,60,70,80,90,100,110 그 외 나머지(120~200등..)는 없고 null 값이 있음.
--department_id 가 null 인 사람은 모두 job_id 에 맞는 department_id 를 부여해주려고함(데이터 무결성)
--1. department_id 가 null 값인 사람 찾기
select *
from employees
where department_id IS NULL;
--한명 밖에 없음. department_id : null, employee_id : 178, Job_id : SA_REP

--2. job_id 가 SA_REP 인 department_id 찾기 (직업에 맞는 부서 찾기)
select job_id, department_id
from job_history
where job_id IN 'SA_REP';
--SA_REP 의 department_id 는 80

--3. 수정 전 savepoint 생성
SAVEPOINT null_to_80;
------------------------SAVEPOINT---------------------------------

--4. 제약조건primary key 인 employee_id 로 찾아서 derpartment_id 를 80으로 수정
UPDATE employees
SET department_id = 80
WHERE employee_id = 178;

select * from employees where employee_id = 178;
--ROLLBACK null_to_80; -- savepoint로 가기
--commit;
--수정끝

--팀구성 및 년차별 샐러리
--각 부서마다 팀원은 몇명이고 어떤 포지션들이 있고 구성은 어떻게 되는지
--Rollup은 다차원적인 집계 결과를 도출 : 사용 각 부서 및 직무별 직원 수를 집계
Select
    E.department_id,
    D.department_name,
    Nvl(E.job_id,'Total') job_id,
    Count(*) 직원수
From employees E
Left Outer Join departments D on E.department_id = E.department_id
Group By Rollup((E.department_id, D.department_name), E.job_id)
Order By E.department_id;

--job_id 별 몇년차는 얼마 받는지 각 년차별로 샐러리 평균
Select
    job_id,
    연차,
    Round(Avg(salary)) 평균급여
From (Select job_id, Floor(Months_Between(Sysdate, hire_date)/12) As 연차, salary From employees)
Group By job_id, 연차
Order By job_id, 연차;
--------------------------------------------------------------------------------Insight 예제
